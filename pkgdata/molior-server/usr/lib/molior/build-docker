#!/bin/sh

: ${BUILD_ID?"set BUILD_ID before running this script"}
: ${BUILD_TOKEN?"set BUILD_TOKEN before running this script"}
: ${PLATFORM?"set PLATFORM before running this script"}
: ${PLATFORM_VERSION?"set PLATFORM_VERSION before running this script"}
: ${ARCH?"set ARCH before running this script"}
: ${ARCH_ANY_ONLY?"set ARCH_ANY_ONLY before running this script"}
: ${REPO_NAME?"set REPO_NAME before running this script"}
: ${VERSION?"set VERSION before running this script"}
: ${PROJECT_DIST?"set PROJECT_DIST before running this script"}
: ${PROJECT?"set PROJECT before running this script"}
: ${PROJECTVERSION?"set PROJECTVERSION before running this script"}
: ${APT_SERVER?"set APT_SERVER before running this script"}
: ${APT_KEYS?"set APT_KEYS before running this script"}
: ${RUN_LINTIAN?"set RUN_LINTIAN before running this script"}
: ${MOLIOR_SERVER?"set MOLIOR_SERVER before running this script"}

log_title ()
{
    message=$1
    shift
    if ! echo $@ | grep -q "no-header-newline"; then
      /bin/echo
    fi
    color=36
    if echo $@ | grep -q "error"; then
      color=31
    fi
    /bin/echo -e "\e[${color}m\e[1m++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\e[0m"
    /bin/echo -en "\e[${color}m\e[1m"
    printf "| %-44s %s |" "molior: $message" "`date -R`"
    /bin/echo -e "\e[0m"
    /bin/echo -e "\e[${color}m\e[1m++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\e[0m"
    if ! echo $@ | grep -q "no-footer-newline"; then
      /bin/echo
    fi
}

log ()
{
    message="$@"
    /bin/echo -e "$message"
}

log_error ()
{
    message="$@"
    /bin/echo -e "\e[31m\e[1m$message\e[0m"
}

finish ()
{
    RET=$?  # must be first
    set +e

    if [ $RET -ne 0 ]; then
      log_title "Building failed" no-footer-newline error
    fi
    exit $RET
}
trap finish EXIT

log_title "Molior Build" no-header-newline

log "Building: $REPO_NAME $VERSION"
log "Platform: $PLATFORM/$PLATFORM_VERSION $ARCH"
log "Build ID: $BUILD_ID"
log "Builder : `hostname`"
echo

log "APT Sources:"
curl --max-time 30 -s "$MOLIOR_SERVER/api2/project/$PROJECT/$PROJECTVERSION/aptsources" > /etc/apt/sources.list
if [ "$?" -ne 0 ]; then
  echo "E: Error getting apt sources from $MOLIOR_SERVER/api2/project/$PROJECT/$PROJECTVERSION/aptsources" >&2
  exit 1
fi
cat /etc/apt/sources.list | sed -e '/^#/d' -e '/^$/d' -e 's/^/ - /'

for aptkey in $APT_KEYS
do
    tmpkey="/tmp/molior-repo-$idx.asc"
    curl --max-time 30 -s $aptkey > $tmpkey
    gpg --dearmour $tmpkey
    mv $tmpkey.gpg /etc/apt/trusted.gpg.d/
    idx=$((i + 1))
done

log_title "Running apt-get update"
echo
apt-get update
echo

mkdir -p build
cd build

log_title "Getting source package"
log "Downloading:"
sources_url="$APT_SERVER/$PLATFORM/$PLATFORM_VERSION/repos/$PROJECT/$PROJECTVERSION/dists/$PROJECT_DIST/main/source/Sources"
log " - $sources_url"
pkgdir=`curl --max-time 30 -s $sources_url | /app/find-package-dir.pl $REPO_NAME $VERSION`
if [ -z "$pkgdir" ]; then
  echo "E: Directory for source package $REPO_NAME $VERSION not found" >&2
  exit 2
fi

# strip epoch version
VERSION=`echo $VERSION | sed 's/^[0-9]\+://'`

dsc_url="$APT_SERVER/$PLATFORM/$PLATFORM_VERSION/repos/$PROJECT/$PROJECTVERSION/$pkgdir/${REPO_NAME}_$VERSION.dsc"
log " - $dsc_url"
curl --max-time 30 -s -O $dsc_url
if [ "$?" -ne 0 ]; then
  echo "E: Error downloading source package $dsc_url" >&2
  exit 3
fi

for srcfile in `/app/dsc-get-files.pl ${REPO_NAME}_$VERSION.dsc`
do
  src_url="$APT_SERVER/$PLATFORM/$PLATFORM_VERSION/repos/$PROJECT/$PROJECTVERSION/$pkgdir/$srcfile"
  log " - $src_url"
  curl --max-time 30 -s -O $src_url
done

#echo
#echo -n "Validating "
#dscverify --no-default-keyrings --keyring ~/.gnupg/trustedkeys.gpg ${REPO_NAME}_$VERSION.dsc | sed -e 's/^ \+/ - /' -e 's/^All/ - All/'
#if [ "$?" -ne 0 ]; then
#  echo "Error: invalid source signature"
#  exit 1
#fi
#

log_title "Extracting source package"
mkdir src
chown build src
cd src

if echo $srcfile | grep -q "\.git$"; then
    su build -c "git clone ../$srcfile"
    cd $srcfile
else
    su build -c "tar xf ../$srcfile"
    cd `find . -maxdepth 1 -type d ! -name '.' | head -n 1`
fi

log_title "Installing build dependencies"
mk-build-deps debian/control --install --remove -t 'apt-get -q -y'
if [ "$?" -ne 0 ]; then
  echo "E: Error installing build dependencies" >&2
  exit 4
fi

log_title "Building debian package"
buildargs=""
if [ "$ARCH_ANY_ONLY" = "True" ]; then
    buildargs="--build=any"
fi

su build -c "dpkg-buildpackage -nc -us -uc -ui -b --target-arch $ARCH $buildargs"
if [ "$?" -ne 0 ]; then
  echo "E: Error building debian package $dsc_url" >&2
  exit 5
fi

if [ "$RUN_LINTIAN" = "True" ]; then
    log_title "Running Lintian"
    su build -c lintian
fi

cd ..

log_title "Uploading"
rm -f ${REPO_NAME}_${VERSION}_$ARCH.build
# FIXME: parse changes files
OUTPUT_FILES=`find . -maxdepth 1 -name "*.deb" -o -name "*.build" -o -name "*_$ARCH.buildinfo" -o -name "*_$ARCH.changes"`

log "Uploading: "
for f in $OUTPUT_FILES
do
  log " - `echo $f | sed 's#^./##'`"
  curl -fs -F "file=@$f" $MOLIOR_SERVER/internal/buildupload/$BUILD_TOKEN >/dev/null
  if [ $? -ne 0 ]; then
    log_error "Error uploading output files"
    exit 6
  fi
done
