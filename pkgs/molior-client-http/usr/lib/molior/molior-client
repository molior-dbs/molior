#!/usr/bin/python3

import asyncio
import aiohttp
import platform
import logging
import json
import os
import shlex
from launchy import Launchy


logger = logging.getLogger(__name__)
molior_server = os.environ.get("MOLIOR_SERVER", "172.16.0.254")


async def build(params, masterws):
    ret = -1
    try:
        build_id = params.get("build_id")
        apt_urls = params.get("apt_urls")
        token = params.get("token")

        logger.info("starting build_%d", build_id)

        if asyncio.iscoroutinefunction(masterws.send_str):
            await masterws.send_str(json.dumps({"status": "building", "build_id": build_id}))
        else:
            masterws.send_str(json.dumps({"status": "building", "build_id": build_id}))

        sbuild_args = ["--extra-repository=\"{}\"".format(url) for url in apt_urls]
        # set env for build script
        env = os.environ.copy()
        env["BUILD_ID"] = str(build_id)
        env["BUILD_TOKEN"] = token
        env["REPO_NAME"] = params.get("repository_name")
        env["VERSION"] = params.get("version")
        env["PLATFORM"] = params.get("distrelease")
        env["PLATFORM_VERSION"] = params.get("distversion")
        env["ARCH"] = params.get("architecture")
        env["ARCH_ANY_ONLY"] = str(int(params.get("arch_any_only")))
        env["APT_URLS"] = " ".join(sbuild_args)
        env["APT_URLS_PLAIN"] = "\n".join([" - {}".format(url) for url in apt_urls])
        env["APT_URLS_PLAIN"] += "\n"
        env["PROJECT"] = params.get("project")
        env["PROJECTVERSION"] = params.get("projectversion")
        env["APT_SERVER"] = params.get("apt_server")
        env["PROJECT_DIST"] = params.get("project_dist")

        session = aiohttp.ClientSession()
        async with session.ws_connect("ws://{}/internal/buildlog/{}".format(molior_server, token)) as buildws:

            async def wslogger():
                try:
                    async for msg in buildws:
                        if msg.type == aiohttp.WSMsgType.TEXT:
                            logger.info("got message: %s", msg.data)
                        elif msg.type == aiohttp.WSMsgType.CLOSED:
                            break
                        elif msg.type == aiohttp.WSMsgType.ERROR:
                            break
                except Exception as exc:
                    logger.exception(exc)

            async def outh(line):
                if asyncio.iscoroutinefunction(buildws.send_str):
                    await buildws.send_str(line + "\n")
                else:
                    buildws.send_str(line + "\n")

            buildcmd = "/usr/bin/unbuffer /usr/lib/molior/build-script"

            try:
                process = Launchy(shlex.split(buildcmd), outh, outh, env=env)
                await process.launch()
                ret = await process.wait()
            except Exception as exc:
                logger.exception(exc)

        logger.info("build-script returned %d", ret)
    except Exception as exc:
        logger.exception(exc)

    if ret == 0:
        if asyncio.iscoroutinefunction(masterws.send_str):
            await masterws.send_str(json.dumps({"status": "success", "build_id": build_id}))
        else:
            masterws.send_str(json.dumps({"status": "success", "build_id": build_id}))
    else:
        if asyncio.iscoroutinefunction(masterws.send_str):
            await masterws.send_str(json.dumps({"status": "failed", "build_id": build_id}))
        else:
            masterws.send_str(json.dumps({"status": "failed", "build_id": build_id}))


async def main():
    session = aiohttp.ClientSession()
    machine = platform.machine()
    node = platform.node()

    if machine == 'x86_64':
        arch = 'amd64'
    elif machine == 'aarch64':
        arch = 'arm64'
    else:
        logger.error("invalid machine architecture: '%s'", machine)
        return

    logger.info("starting on %s/%s", arch, node)

    while(True):
        try:
            async with session.ws_connect("ws://{}/internal/registry/{}/{}".format(molior_server, arch, node)) as ws:
                async for msg in ws:
                    if msg.type == aiohttp.WSMsgType.TEXT:
                        logger.info("got message: %s", msg.data)
                        try:
                            req = json.loads(msg.data)
                        except Exception as exc:
                            logger.error("invalid request: %s", msg.data)
                            continue

                        if "task" in req:
                            asyncio.ensure_future(build(req["task"], ws))
                        elif "ping" in req:
                            uptime_seconds = ""
                            with open('/proc/uptime', 'r') as f:
                                uptime_seconds = float(f.readline().split()[0])

                            if asyncio.iscoroutinefunction(ws.send_str):
                                await ws.send_str(json.dumps({"pong": {"seq": req["ping"],
                                                             "uptime_seconds": uptime_seconds,
                                                              "load": os.getloadavg()}}))
                            else:
                                ws.send_str(json.dumps({"pong": {"seq": req["ping"],
                                                       "uptime_seconds": uptime_seconds,
                                                        "load": os.getloadavg()}}))

                        else:
                            logger.error("invalid request: %s", msg.data)
                    elif msg.type == aiohttp.WSMsgType.CLOSED:
                        break
                    elif msg.type == aiohttp.WSMsgType.ERROR:
                        break
        except Exception as exc:
            logger.exception(exc)
        await asyncio.sleep(1)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    Launchy.attach_loop(loop)
    asyncio.ensure_future(main())
    loop.run_forever()
